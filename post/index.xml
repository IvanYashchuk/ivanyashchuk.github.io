<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ivan Yashchuk</title>
    <link>https://ivanyashchuk.github.io/post/</link>
    <description>Recent content in Posts on Ivan Yashchuk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</managingEditor>
    <webMaster>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</webMaster>
    <lastBuildDate>Sun, 25 Aug 2019 13:14:48 +0300</lastBuildDate>
    
	<atom:link href="https://ivanyashchuk.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GSoC ChainerX: Final</title>
      <link>https://ivanyashchuk.github.io/post/gsoc19-final/</link>
      <pubDate>Sun, 25 Aug 2019 13:14:48 +0300</pubDate>
      <author>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</author>
      <guid>https://ivanyashchuk.github.io/post/gsoc19-final/</guid>
      <description>The Summer of Code is coming to an end. 26th of August is the deadline for participants to submit their final report. The summary of the project, including all submitted PRs, is available here.
As a result of this GSoC project, cholesky, qr, solve, inv, svd, pinv, eigh, eigvalsh functions were implemented for ChainerX. All of them (except eigvalsh) were made differentiable. Most of the changes are in master branch already and available both using C++ API and in chainerx.</description>
    </item>
    
    <item>
      <title>GSoC ChainerX: Performance of new routines</title>
      <link>https://ivanyashchuk.github.io/post/gsoc19-performance/</link>
      <pubDate>Fri, 02 Aug 2019 12:36:09 +0300</pubDate>
      <author>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</author>
      <guid>https://ivanyashchuk.github.io/post/gsoc19-performance/</guid>
      <description>I have run some performance tests to compare ChainerX implementation against NumPy and CuPy. Some new chainerx.linalg routines run more slowly compared to numpy.linalg and cupy.linalg. Performance results &amp;amp; code to obtain them is available in this gist.
The most probable reason for slowness of qr, solve, inv is allocating temporary arrays in the kernel and copying data from them to routine level arrays. Also repeated transpose-copy operations (because of ChainerX&amp;rsquo;s row-major vs column-major ordering of LAPACK/cuSOLVER) have an effect.</description>
    </item>
    
    <item>
      <title>GSoC ChainerX: Second evaluation</title>
      <link>https://ivanyashchuk.github.io/post/gsoc19-second-evaluation/</link>
      <pubDate>Mon, 22 Jul 2019 09:44:01 +0300</pubDate>
      <author>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</author>
      <guid>https://ivanyashchuk.github.io/post/gsoc19-second-evaluation/</guid>
      <description>It&amp;rsquo;s time for the second evaluation and so far everything goes very smoothly. New linear algebra routines are becoming to be merged and others are soon to be in this stage. Pull request that adds Solve &amp;amp; Inverse (#7474) functions has been merged! SVD, QR PRs are ready for review!
TODOs after existing PRs: * Tutorial (and docs) * Support mixed/other dtypes such as fp16 * Possibly cover more routines under numpy.</description>
    </item>
    
    <item>
      <title>GSoC ChainerX: six weeks progress</title>
      <link>https://ivanyashchuk.github.io/post/gsoc19-six-weeks/</link>
      <pubDate>Sat, 06 Jul 2019 23:26:32 +0300</pubDate>
      <author>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</author>
      <guid>https://ivanyashchuk.github.io/post/gsoc19-six-weeks/</guid>
      <description>Me and my mentor Vincent have a face-to-face meeting every Wednesday over videochat. Last week our weekly meeting was in person. I&amp;rsquo;ve visited Preferred Networks office (that&amp;rsquo;s the company behind Chainer) and met a few developers there and we had lunch together. They even have a little space with Tatami (japanese mat) in the common area! Unfortunately, I forgot to take pictures.
For the past days I was mostly focused on polishing existing PRs according to the code review.</description>
    </item>
    
    <item>
      <title>GSoC ChainerX: CPU bindings</title>
      <link>https://ivanyashchuk.github.io/post/gsoc19-cpu-bindings/</link>
      <pubDate>Wed, 19 Jun 2019 06:23:50 +0300</pubDate>
      <author>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</author>
      <guid>https://ivanyashchuk.github.io/post/gsoc19-cpu-bindings/</guid>
      <description>Linear algebra routines from this issue are now working both on CPU and GPU. When it comes to the choice of linear algebra library on CPU, the variety is much broader than on GPU. However, we don&amp;rsquo;t need a full featured linear algebra matrix library like Eigen, or Armadillo, as ChainerX has its own ndarray. Therefore, it was decided to use one of the LAPACK implementations. For now it seems that working with LAPACK (which is written in Fortran) directly without C wrappers is the way to go.</description>
    </item>
    
    <item>
      <title>GSoC ChainerX: First Two Weeks</title>
      <link>https://ivanyashchuk.github.io/post/gsoc19-first-two-weeks/</link>
      <pubDate>Tue, 11 Jun 2019 21:15:04 +0300</pubDate>
      <author>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</author>
      <guid>https://ivanyashchuk.github.io/post/gsoc19-first-two-weeks/</guid>
      <description>Already two weeks of coding have gone past!
My progress can be tracked in this issue. Part of the project is making LAPACK routines accesible from ChainerX performing computations in CPU and GPU. Another part is making them differentiable.
LAPACK (Linear Algebra Package) is a standard software library for numerical linear algebra. It provides routines for solving systems of linear equations and linear least squares, eigenvalue problems, and singular value decomposition.</description>
    </item>
    
    <item>
      <title>GSoC ChainerX: Linear Algebra</title>
      <link>https://ivanyashchuk.github.io/post/gsoc19-start/</link>
      <pubDate>Sun, 26 May 2019 20:13:42 +0300</pubDate>
      <author>ivan.yashchuk@aalto.fi (Ivan Yashchuk)</author>
      <guid>https://ivanyashchuk.github.io/post/gsoc19-start/</guid>
      <description>Coding period start soon!
This summer I am going to work on extending ChainerX with some Linear Algebra routines. The goal is to implement common routines that are described at numpy.linalg. And their sensitivities for reverse mode automatic differentiation has to implemented as well!</description>
    </item>
    
  </channel>
</rss>